import asyncio
import os
import json
import logging
import aiohttp
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from logging_config import setup_logging

DATA_FILE_PATH = 'data.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, YANDEX_GPT_API_KEY, FOLDER_ID]):
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, YANDEX_GPT_API_KEY –∏ FOLDER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# URL –¥–ª—è –°–ò–ù–•–†–û–ù–ù–û–ì–û YandexGPT API
SYNC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç")
        ]
    ],
    resize_keyboard=True, # –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
    one_time_keyboard=False, # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å..." # –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
)

try:
    with open(DATA_FILE_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)
        cultural_data = data.get('categories')
        if cultural_data is None:
            # –Ø–≤–Ω–æ –ø–æ–¥–Ω–∏–º–µ–º KeyError, —á—Ç–æ–±—ã —ç—Ç–æ –ø–æ–ø–∞–ª–æ –≤ except –∏ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
            raise KeyError("'categories' key missing in data.json")
    logger.info(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö '{DATA_FILE_PATH}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
except (FileNotFoundError, KeyError, json.JSONDecodeError) as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{DATA_FILE_PATH}': {e}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–ª –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cultural_data = {}

#  –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RouteForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    interests = State()
    time = State()
    location = State()

def construct_prompt_for_interests(interests: str) -> str:
    return f"""
    –ö–∞–∫–∞—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (1:–ü–∞–º—è—Ç–Ω–∏–∫–∏ –∏ –º–æ–Ω—É–º–µ–Ω—Ç—ã; 2:–ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã; 3:–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è; 4:–ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏; 5:–¢–µ–∞—Ç—Ä—ã; 6:–ö—É–ª—å—Ç—É—Ä–Ω–æ-–¥–æ—Å—É–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã; 7:–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ; 8:–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –º–∞–∫–µ—Ç—ã; 9:–°–æ–≤–µ—Ç—Å–∫–∏–µ –º–æ–∑–∞–∏–∫–∏) –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—ã ({interests}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
    –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 9, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    """

def construct_prompt(user_data: dict) -> str:
    """–ü—Ä–æ–º–ø—Ç –¥–ª—è AI-—Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    objects_text = "\n".join([f"- {obj['title']} (–∞–¥—Ä–µ—Å: {obj['address']})" for obj in user_data['selected_objects']])
    
    return f"""
    –¢—ã ‚Äî —É–≤–ª–µ—á–µ–Ω–Ω—ã–π –≥–∏–¥ –∏ —Å–∫—Ä—É–ø—É–ª–µ–∑–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–∑—è—Ç—å –ì–û–¢–û–í–´–ô —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Å–ø–ª–µ—Å—Ç–∏ –∏–∑ –Ω–∏—Ö –∂–∏–≤–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –°–¢–†–û–ì–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É —Ç—É—Ä–∏—Å—Ç–∞. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    --- –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –í–†–ï–ú–ï–ù–ò ---
    –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å '–î–æ—Å—Ç—É–ø–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏' —Ç—É—Ä–∏—Å—Ç–∞: {user_data['time']} —á–∞—Å–∞.

    –î–ê–ù–ù–´–ï –û–¢ –¢–£–†–ò–°–¢–ê:
    - –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {user_data['location']}

    –°–ü–ò–°–û–ö –î–û–°–¢–û–ü–†–ò–ú–ï–ß–ê–¢–ï–õ–¨–ù–û–°–¢–ï–ô –î–õ–Ø –ú–ê–†–®–†–£–¢–ê (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏—Ö):
    {objects_text}

    --- –ü–†–ê–í–ò–õ–ê –ö–ê–ß–ï–°–¢–í–ê ---
    1. –ü–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–π "—Ñ–∏—à–∫—É" –∏–ª–∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞.
    2. –¢–∞–π–º–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "0-15 –º–∏–Ω: ...".

    –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö JSON:
    –í–µ—Ä–Ω–∏ –û–î–ò–ù JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: "title", "start_location", "route_points", "timeline", "summary". "route_points" ‚Äî –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–ª—é—á–∞–º–∏ "name", "reason", "travel_info", "visit_duration".
    """

def format_route_from_json(route_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ –∏–¥–µ–∞–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    try:
        title_block = [
            f"*{route_data.get('title', '–í–∞—à –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç')}*", 
            f"*–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞:* {route_data.get('start_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" 
        ]

        route_points_blocks = []
        for i, point in enumerate(route_data.get('route_points', []), 1):
            point_details = [
                f"*{i}. {point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*", 
                f"_{point.get('reason', '')}_",
                f"*–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:* {point.get('travel_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}", 
                f"*–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è:* {point.get('visit_duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" 
            ]
            route_points_blocks.append("\n".join(point_details))

        timeline_items = route_data.get('timeline', [])
        if timeline_items:
            timeline_block = ["_–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∞–π–º–ª–∞–π–Ω:_"]
            for item in timeline_items:
                timeline_block.append(f"- _{item}_")
            timeline_block = ["\n".join(timeline_block)]
        else:
            timeline_block = []

        summary_block = [route_data.get('summary', '')]

        all_blocks = [
            "\n".join(title_block),
            *route_points_blocks,
            *timeline_block,
            *summary_block
        ]
        
        return "\n\n".join(filter(None, all_blocks))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞."    
async def get_gpt_route_async(prompt: str) -> str | None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    headers = {
        "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.1, "maxTokens": "2000"},
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É."},
            {"role": "user", "text": prompt}
        ]
    }

    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 45 —Å–µ–∫—É–Ω–¥
        timeout = aiohttp.ClientTimeout(total=45)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YandexGPT. –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤.")
            
            async with session.post(SYNC_API_URL, headers=headers, json=body) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data['result']['alternatives'][0]['message']['text']
                    logger.info("–û—Ç–≤–µ—Ç –æ—Ç YandexGPT —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
                    return result_text
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {response.status}, {error_text}")
                    return None
    except asyncio.TimeoutError:
        logger.error("–ó–∞–ø—Ä–æ—Å –∫ YandexGPT –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç.")
        return None
    except Exception as e:
        logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT!")
        return None


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    if not cultural_data:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
        
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    await state.clear() 
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=main_keyboard
    )

@dp.message(F.text == "üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç")
async def handle_build_route_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'.")
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? ü§î")
    await state.set_state(RouteForm.interests)



@dp.message(RouteForm.interests)
async def process_interests(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(interests=message.text)
    prompt_for_category = construct_prompt_for_interests(message.text)
    category = await get_gpt_route_async(prompt_for_category)
    logger.info(f"YandexGPT –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}.")

    category_key = category.strip() if category else ""

    # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_objects_in_category = cultural_data.get(category_key)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–º–µ–Ω–Ω–æ —Å–ø–∏—Å–æ–∫ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if not isinstance(all_objects_in_category, list) or not all_objects_in_category:
        logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –≤ data.json.")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–Ω–∞—á–µ.")
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä: –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–Ω—å—à–µ 4 ‚Äî –±–µ—Ä–µ–º –≤—Å–µ, –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –∏–∑ 4
    num_to_select = min(len(all_objects_in_category), 4)
    selected_objects = random.sample(all_objects_in_category, num_to_select)

    await state.update_data(selected_objects=selected_objects)

    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º!\n\n–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏‚è≥ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–≤ —á–∞—Å–∞—Ö)?")
    await state.set_state(RouteForm.time)


@dp.message(RouteForm.time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not message.text.isdigit():
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3).")
        return
    await state.update_data(time=message.text)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤—Ä–µ–º—è: {message.text} —á.")
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüìç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º.")
    await state.set_state(RouteForm.location)

@dp.message(RouteForm.location, F.text | F.location)
async def process_location_and_generate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞."""
    user_location = message.text
    if message.location:
        user_location = f"–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {message.location.latitude}, {message.location.longitude}"
    
    await state.update_data(location=user_location)
    user_data = await state.get_data()
    await state.clear()
    
    logger.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ–±—Ä–∞–Ω—ã: {user_data}")
    await message.answer("–°—É–ø–µ—Ä! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª. üß† –°–æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    prompt = construct_prompt( user_data)
    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω JSON-–ø—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT.")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
    json_string = await get_gpt_route_async(prompt)
    
    if not json_string:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT.")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if json_string.startswith("```"):
        json_string = json_string[3:]
    if json_string.endswith("```"):
        json_string = json_string[:-3]
    json_string = json_string.strip()


    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        route_data = json.loads(json_string)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = format_route_from_json(route_data)

        logger.debug(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n---\n{formatted_message}\n---")
        
        logger.info(f"–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω.")
        await message.answer(formatted_message, parse_mode=ParseMode.MARKDOWN)
        
    except json.JSONDecodeError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç YandexGPT. –û—Ç–≤–µ—Ç:\n{json_string}")
        await message.answer("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")