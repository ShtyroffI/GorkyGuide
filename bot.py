import asyncio
import os
import json
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from logging_config import setup_logging


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, YANDEX_GPT_API_KEY, FOLDER_ID]):
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN, YANDEX_GPT_API_KEY –∏ FOLDER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# URL –¥–ª—è –°–ò–ù–•–†–û–ù–ù–û–ì–û YandexGPT API
SYNC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

#  –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RouteForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    interests = State()
    time = State()
    location = State()


def construct_prompt(data: dict) -> str:
    return f"""
    –¢—ã ‚Äî —É–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∂–∏–≤–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    –î–ê–ù–ù–´–ï –û–¢ –¢–£–†–ò–°–¢–ê:
    - –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['interests']}
    - –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {data['time']} —á–∞—Å–∞
    - –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location']}

    --- –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê –ö–ê–ß–ï–°–¢–í–ê ---
    1.  **–ü–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ!** –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π —è–∑—ã–∫. –í–º–µ—Å—Ç–æ "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è..." –ø–∏—à–∏ "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ...".
    2.  **–î–æ–±–∞–≤—å "—Ñ–∏—à–∫—É".** –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ –≤ "reason" –¥–æ–±–∞–≤—å –æ–¥–∏–Ω –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â—É—é –¥–µ—Ç–∞–ª—å.
    3.  **–¢–∞–π–º–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º.** –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—É–ª–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: "0-15 –º–∏–Ω: –û—Å–º–æ—Ç—Ä –ê—Ä—Å–µ–Ω–∞–ª–∞", "15-25 –º–∏–Ω: –ü—Ä–æ–≥—É–ª–∫–∞ –¥–æ –º—É–∑–µ—è".

    –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö JSON:
    1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–î–ù–ò–ú JSON-–æ–±—ä–µ–∫—Ç–æ–º.
    2. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏: "title", "start_location", "route_points", "timeline", "summary".
    3. "route_points" ‚Äî –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–ª—é—á–∞–º–∏: "name", "reason", "travel_info", "visit_duration".
    4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –≤–Ω—É—Ç—Ä–∏ JSON-–∑–Ω–∞—á–µ–Ω–∏–π.

    ### –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ JSON:
    {{
      "title": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–µ—Ä–¥—Ü–µ –ù–∏–∂–Ω–µ–≥–æ: –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ö—Ä–µ–º–ª—é",
      "start_location": "–ü–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞ –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–≥–æ",
      "route_points": [
        {{
          "name": "–î–º–∏—Ç—Ä–∏–µ–≤—Å–∫–∞—è –±–∞—à–Ω—è",
          "reason": "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥ –≤ –ö—Ä–µ–º–ª—å, –∞ –µ–≥–æ –≤–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞! –ü–æ –ª–µ–≥–µ–Ω–¥–µ, –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–ª–∞—Å—å –∫–∞–∑–Ω–∞ –≥–æ—Ä–æ–¥–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ —Å–º–æ—Ç—Ä–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É.",
          "travel_info": "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ —É –≤—Ö–æ–¥–∞.",
          "visit_duration": "20 –º–∏–Ω—É—Ç"
        }}
      ],
      "timeline": [
        "0-5 –º–∏–Ω: –û—Å–º–æ—Ç—Ä –î–º–∏—Ç—Ä–∏–µ–≤—Å–∫–æ–π –±–∞—à–Ω–∏.",
        "5-20 –º–∏–Ω: –ü—Ä–æ–≥—É–ª–∫–∞ –∫ –ê—Ä—Å–µ–Ω–∞–ª—É."
      ],
      "summary": "–≠—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∞ ‚Äî –±—ã—Å—Ç—Ä–æ–µ, –Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –≤–æ–µ–Ω–Ω—É—é –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≥–æ—Ä–æ–¥–∞ –ø—Ä—è–º–æ –≤ –µ–≥–æ —Å–µ—Ä–¥—Ü–µ."
    }}
    """

def format_route_from_json(route_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ –∏–¥–µ–∞–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    try:
        # --- –ë–õ–û–ö 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        title_block = [
            f"*{route_data.get('title', '–í–∞—à –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç')}*", # –ò–ó–ú–ï–ù–ï–ù–û
            f"*–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞:* {route_data.get('start_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" # –ò–ó–ú–ï–ù–ï–ù–û
        ]

        # --- –ë–õ–û–ö 2: –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ ---
        route_points_blocks = []
        for i, point in enumerate(route_data.get('route_points', []), 1):
            point_details = [
                f"*{i}. {point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*", # –ò–ó–ú–ï–ù–ï–ù–û
                f"_{point.get('reason', '')}_",
                f"*–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:* {point.get('travel_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}", # –ò–ó–ú–ï–ù–ï–ù–û
                f"*–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è:* {point.get('visit_duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" # –ò–ó–ú–ï–ù–ï–ù–û
            ]
            route_points_blocks.append("\n".join(point_details))

        # --- –ë–õ–û–ö 3: –¢–∞–π–º–ª–∞–π–Ω ---
        timeline_items = route_data.get('timeline', [])
        if timeline_items:
            timeline_block = ["_–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∞–π–º–ª–∞–π–Ω:_"] # –ò–ó–ú–ï–ù–ï–ù–û
            for item in timeline_items:
                timeline_block.append(f"- _{item}_")
            timeline_block = ["\n".join(timeline_block)]
        else:
            timeline_block = []

        # --- –ë–õ–û–ö 4: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ---
        summary_block = [route_data.get('summary', '')]

        # --- –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ë–û–†–ö–ê ---
        all_blocks = [
            "\n".join(title_block),
            *route_points_blocks,
            *timeline_block,
            *summary_block
        ]
        
        return "\n\n".join(filter(None, all_blocks))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞."    
async def get_gpt_route_async(prompt: str) -> str | None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    headers = {
        "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.1, "maxTokens": "2000"},
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É."},
            {"role": "user", "text": prompt}
        ]
    }

    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 45 —Å–µ–∫—É–Ω–¥
        timeout = aiohttp.ClientTimeout(total=45)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YandexGPT. –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤.")
            
            async with session.post(SYNC_API_URL, headers=headers, json=body) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data['result']['alternatives'][0]['message']['text']
                    logger.info("–û—Ç–≤–µ—Ç –æ—Ç YandexGPT —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
                    return result_text
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {response.status}, {error_text}")
                    return None
    except asyncio.TimeoutError:
        logger.error("–ó–∞–ø—Ä–æ—Å –∫ YandexGPT –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç.")
        return None
    except Exception as e:
        logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT!")
        return None


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.full_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É.\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? ü§î\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: üé® —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, üè∞ –∏—Å—Ç–æ—Ä–∏—è, ‚òïÔ∏è –∫–æ—Ñ–µ–π–Ω–∏)")
    await state.set_state(RouteForm.interests)

@dp.message(RouteForm.interests)
async def process_interests(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(interests=message.text)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã: {message.text}")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏‚è≥ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–≤ —á–∞—Å–∞—Ö)?")
    await state.set_state(RouteForm.time)

@dp.message(RouteForm.time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not message.text.isdigit():
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3).")
        return
    await state.update_data(time=message.text)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤—Ä–µ–º—è: {message.text} —á.")
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüìç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º.")
    await state.set_state(RouteForm.location)

@dp.message(RouteForm.location, F.text | F.location)
async def process_location_and_generate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞."""
    user_location = message.text
    if message.location:
        user_location = f"–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {message.location.latitude}, {message.location.longitude}"
    
    await state.update_data(location=user_location)
    user_data = await state.get_data()
    await state.clear()
    
    logger.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ–±—Ä–∞–Ω—ã: {user_data}")
    await message.answer("–°—É–ø–µ—Ä! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª. üß† –°–æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    prompt = construct_prompt(user_data)
    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω JSON-–ø—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT.")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
    json_string = await get_gpt_route_async(prompt)
    
    if not json_string:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT.")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if json_string.startswith("```"):
        json_string = json_string[3:]
    if json_string.endswith("```"):
        json_string = json_string[:-3]
    json_string = json_string.strip()


    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        route_data = json.loads(json_string)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = format_route_from_json(route_data)

        logger.debug(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n---\n{formatted_message}\n---")
        
        logger.info(f"–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω.")
        await message.answer(formatted_message, parse_mode=ParseMode.MARKDOWN)
        
    except json.JSONDecodeError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç YandexGPT. –û—Ç–≤–µ—Ç:\n{json_string}")
        await message.answer("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")