import asyncio
import os
import requests
import json
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–∞–∫ —É –≤–∞—Å) ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

if not all([BOT_TOKEN, YANDEX_GPT_API_KEY, FOLDER_ID]):
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env ‚Äî –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# --- URL –¥–ª—è YandexGPT (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ) ---
ASYNC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completionAsync"
OPERATION_STATUS_URL = "https://operation.api.cloud.yandex.net/operations/"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
class RouteForm(StatesGroup):
    interests = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    time = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    location = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT API ---

def construct_prompt(data: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞.

    –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ç—É—Ä–∏—Å—Ç–∞:
    - –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['interests']}
    - –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {data['time']} —á–∞—Å–∞
    - –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location']}

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É:
    1. –°–æ—Å—Ç–∞–≤—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ 3-5 —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ.
    2. –ù–∞—á–Ω–∏ –º–∞—Ä—à—Ä—É—Ç –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ –∫—Ä–∞—Ç–∫–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –µ–≥–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å.
    4. –ü—Ä–µ–¥–ª–æ–∂–∏ –ª–æ–≥–∏—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∞–π–º–ª–∞–π–Ω.
    5. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
    """

def start_generation(prompt: str) -> str | None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    headers = {
        "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.6, "maxTokens": "2000"},
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É."},
            {"role": "user", "text": prompt}
        ]
    }
    try:
        response = requests.post(ASYNC_API_URL, headers=headers, data=json.dumps(body))
        if response.status_code == 200:
            return response.json()['id']
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}, {response.text}")
        return None
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

async def await_result(operation_id: str) -> str | None:
    """–û–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—è —Å—Ç–∞—Ç—É—Å."""
    url = f"{OPERATION_STATUS_URL}{operation_id}"
    headers = {"Authorization": f"Api-Key {YANDEX_GPT_API_KEY}"}

    while True:
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                data = response.json()
                if data.get('done'):
                    if 'response' in data:
                        return data['response']['alternatives'][0]['message']['text']
                    else:
                        # –ï—Å–ª–∏ 'done' true, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                        error_message = data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏')
                        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {error_message}"
                # –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–æ, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(2)
            else:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}"
        except Exception as e:
            return f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ö—ç–Ω–¥–ª–µ—Ä—ã) ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã."""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É.\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ñ–µ–π–Ω–∏)")
    await state.set_state(RouteForm.interests)

@dp.message(RouteForm.interests)
async def process_interests(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è."""
    await state.update_data(interests=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–≤ —á–∞—Å–∞—Ö)?")
    await state.set_state(RouteForm.time)

@dp.message(RouteForm.time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é."""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3).")
        return
    await state.update_data(time=message.text)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω–µ–º.")
    await state.set_state(RouteForm.location)

@dp.message(RouteForm.location)
async def process_location_and_generate(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é."""
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ —Ç–µ–∫—Å—Ç, –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    user_location = message.text
    if message.location:
        user_location = f"{message.location.latitude}, {message.location.longitude}"
    
    await state.update_data(location=user_location)
    user_data = await state.get_data()
    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ FSM

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É
    await message.answer("–°—É–ø–µ—Ä! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏–ª. üß† –°–æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = construct_prompt(user_data)
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    operation_id = start_generation(prompt)
    if not operation_id:
        await message.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return
        
    # 3. –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_route = await await_result(operation_id)
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if final_route:
        await message.answer(final_route)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())